-- only scope check
module Coherence.Example.TC-DSL where

import Bitcoin as BTC
open import Coherence.Example.Setup
open import SymbolicModel ‚ãØ‚Ä≤ as S
  hiding ( C; G; t; a; v; A; B; x; y; Œì‚ÇÄ; Œì‚Çú‚ÇÄ; Œî; Œì‚Çú; Œì‚Çú‚Ä≤; as; Œ±; Œì; Œì‚Ä≤
          ; _`=_; _`‚àß_; _`‚à®_; `true; _`<_
          ; RÀ¢; RÀ¢‚Ä≤; Œ£
          )
open import ComputationalModel ‚ãØ‚Ä≤ finPart keypairs as C
  renaming (KÃÇ to K·µñ ≥‚Å±·µõ; K to K·µñ·µò·µá)
  hiding (i; t; t‚Ä≤; `; ‚à£_‚à£; n; Run; Time; m; m‚Ä≤; Œª·∂ú; R·∂ú; Value; ‚àé; R; R‚Ä≤; R‚Ä≥; R·∂ú‚Ä≤
        )
  hiding (_ùêÅ); _ùêÅ = id -- ** for fast evaluation, i.e. type-checking

-- ** NB: cannot use this cause of different keys
-- open import Compiler.Example using (module TimedCommitment)
-- open TimedCommitment
-- open ‚à£K TC

open import BitML.Example.TimedCommitment
v = Value ‚àã 1 ùêÅ; a‚ôØ = + 9
open ‚à£K TC

T‚ÇÄ : Tx 0 2
T‚ÇÄ = record
  { inputs  = []
  ; wit     = wit‚ä•
  ; relLock = V.replicate 0
  ; outputs = [ (1 , 1 ùêÅ locked-by ∆õ (versig [ K 0 ] [ 0 ]))
              ‚®æ (1 , 0 ùêÅ locked-by ∆õ (versig [ K 1 ] [ 0 ]))
              ]
  ; absLock = 0 }

-- pre-existing deposits
T·µÉ T·µá : TxInput‚Ä≤
T·µÉ = (-, -, T‚ÇÄ) at 0F
T·µá = (-, -, T‚ÇÄ) at 1F

sechash : namesÀ° G ‚Ü¶ ‚Ñ§
sechash = Œª where
  {- "a" -} ùüò ‚Üí a‚ôØ

txout : names ≥ TC ‚Ü¶ TxInput‚Ä≤
txout = Œª where
  {- "x" -} ùüò ‚Üí T·µÉ
  {- "y" -} ùüô ‚Üí T·µá

out : InitTx G √ó (subterms‚Å∫ C ‚Ü¶‚Ä≤ BranchTx)
out = bitml-compiler {ad = TC} auto sechash txout K K¬≤

outTxs : Tx 2 1 √ó Tx 1 1 √ó Tx 1 1 √ó Tx 1 1
outTxs = let t‚ÇÄ , m = out in t‚ÇÄ , m 0 , m 1 , m 2

T·µ¢‚Çô·µ¢‚Çú : Tx 2 1
T·µ¢‚Çô·µ¢‚Çú = sig‚ãÜ [ [ K 0 ] ‚®æ [ K 1 ] ] record
  { inputs  = hashTx‚Å± <$> [ T·µÉ ‚®æ T·µá ]
  ; wit     = wit‚ä•
  ; relLock = V.replicate 0
  ; outputs = [ -, v locked-by ∆õ (e‚ÇÅ `‚à® e‚ÇÇ)]
  ; absLock = 0 }
  where
    e‚ÇÅ : Script 3 `Bool
    e‚ÇÅ = versig (codom $ K¬≤ 0) [ 0 ‚®æ 1 ]
      `‚àß `true
      `‚àß ‚ãÄ [ hash (var 2) `= BTC.` (sechash 0) `‚àß (BTC.` (+ Œ∑) `< BTC.‚à£ var 2 ‚à£) ]

    e‚ÇÇ : Script 3 `Bool
    e‚ÇÇ = versig (codom $ K¬≤ 2) [ 0 ‚®æ 1 ]
T·µ¢‚Çô·µ¢‚Çú‚ôØ = (‚àÉTx ‚àã -, -, T·µ¢‚Çô·µ¢‚Çú) ‚ôØ

T‚Ä≤ : Tx 1 1
T‚Ä≤ = sig‚ãÜ [ codom (K¬≤ 0) ] record
  { inputs  = [ T·µ¢‚Çô·µ¢‚Çú‚ôØ at 0 ]
  ; wit     = wit‚ä•
  ; relLock = V.replicate 0
  ; outputs = [ _ , v locked-by ∆õ e‚Ä≤ ]
  ; absLock = 0 }
  where
    e‚Ä≤ : Script 2 `Bool
    e‚Ä≤ = versig (codom $ K¬≤ 1) [ 0 ‚®æ 1 ]
T‚Ä≤‚ôØ = (‚àÉTx ‚àã -, -, T‚Ä≤) ‚ôØ

T‚Ä≤·µÉ : Tx 1 1
T‚Ä≤·µÉ = sig‚ãÜ [ codom (K¬≤ 1) ] record
  { inputs  = [ T‚Ä≤‚ôØ at 0 ]
  ; wit     = wit‚ä•
  ; relLock = V.replicate 0
  ; outputs = [ 1 , v locked-by ∆õ versig [ K 0 ] [ 0 ] ]
  ; absLock = 0 }

T‚Ä≤·µá : Tx 1 1
T‚Ä≤·µá = sig‚ãÜ [ codom (K¬≤ 2) ] record
  { inputs  = [ T·µ¢‚Çô·µ¢‚Çú‚ôØ at 0 ]
  ; wit     = wit‚ä•
  ; relLock = V.replicate 0
  ; outputs = [ 1 , v locked-by ∆õ versig [ K 1 ] [ 0 ] ]
  ; absLock = t }

_ = outTxs ‚â° (T·µ¢‚Çô·µ¢‚Çú , T‚Ä≤ , T‚Ä≤·µÉ , T‚Ä≤·µá)
  ‚àã refl

--

txoutTC = Txout TC ‚àã Œª where ùüò ‚Üí T·µÉ; ùüô ‚Üí T·µá
txoutC  = Txout C  ‚àã Œª ()
txoutG  = Txout G  ‚àã Œª where ùüò ‚Üí T·µÉ; ùüô ‚Üí T·µá

TC‚Ä≤ = encodeAd TC (txoutG , txoutC)
C,hÃÖ,kÃÖ = encode {A = Message √ó List HashId √ó List HashId}
               (TC‚Ä≤ , [ a‚ôØ ] , concatMap (map pub ‚àò codom) (codom K¬≤))

_ : _ ~ _
_ =
  ‚àé   (‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y) at0
      ‚ä£ auto , [txout: (Œª where ùüò ‚Üí T·µÉ; ùüô ‚Üí T·µá) ‚à£sechash: (Œª ()) ‚à£Œ∫: (Œª ()) ]
    ~ [ submit (-, -, T‚ÇÄ)
      ‚®æ (A ‚Üí‚àó‚à∂ encode (K·µñ A , KÃÇ·µñ A))
      ‚®æ (B ‚Üí‚àó‚à∂ encode (K·µñ B , KÃÇ·µñ B))
      ] ‚ä£ ((-, -, T‚ÇÄ) , (Œª where ùüò ‚Üí ùüò; ùüô ‚Üí ùüô) , refl)
    ‚ä£ (Œª where ùüò ‚Üí 0F , refl , refl; ùüô ‚Üí 1F , refl , refl)

  ‚Äî‚Üí  (` TC ‚à£ ‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y) at0
      ‚ä£ ((advertise‚¶Ö TC ‚¶Ü , _) , _)
    ~ (A ‚Üí‚àó‚à∂ TC‚Ä≤)
    ‚ä£ [L1] mk‚Ñç {h = mk {TC}{‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ùêÅ ‚ü©at y}
               auto auto (auto .unmk‚äÜ) _}

  ‚Äî‚Üí·µã (A ‚ÜíO‚à∂ encode a)
    ‚ä£ [2] (inj‚ÇÅ refl)

  ‚Äî‚Üí·µã (O‚Üí A ‚à∂ a‚ôØ)
    ‚ä£ [2] (inj‚ÇÇ refl)

  ‚Äî‚Üí  (` TC ‚à£ ‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y
            ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü© ‚à£ A auth[ ‚ôØ‚ñ∑ TC ]) at0
      ‚ä£ ((auth-commit‚¶Ö A , TC , [ a , just N ] ‚¶Ü , _) , _)
    ~ (A ‚Üí‚àó‚à∂ SIG (K·µñ·µò·µá A) C,hÃÖ,kÃÖ)
    ‚ä£ [L2] mk‚Ñç {h = h‚ÇÇ}
               (A , ùüö)
               [ (Œª _ ()) ‚®æ (Œª _ ‚Üí label‚â¢ encode‚â¢) ‚®æ (Œª _ ‚Üí label‚â¢ encode‚â¢) ]
               [ h‚â° ] [ (Œª _ ()) ‚®æ (Œª _ ()) ] [ (A , encode a , ùüò , ‚à£a‚à£) ] auto (Œª ())

  ‚Äî‚Üí  (` TC ‚à£ (‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y
            ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü© ‚à£ A auth[ ‚ôØ‚ñ∑ TC ])
            ‚à£ B auth[ ‚ôØ‚ñ∑ TC ]) at0
            ‚ä£ ((auth-commit‚¶Ö B , TC , [] ‚¶Ü , _) , _)
    ~ (B ‚Üí‚àó‚à∂ SIG (K·µñ·µò·µá B) C,hÃÖ,kÃÖ)
    ‚ä£ [L2] mk‚Ñç {h = h‚ÇÇ‚Ä≤}
               (A , ùüõ)
               [ (Œª _ ()) ‚®æ (Œª _ ‚Üí label‚â¢ encode‚â¢) ‚®æ (Œª _ ‚Üí label‚â¢ encode‚â¢) ]
               [] [ (Œª _ ‚Üí label‚â¢ SIG‚â¢) ‚®æ (Œª _ ()) ‚®æ (Œª _ ()) ] [] [] (Œª ())

  ‚Äî‚Üí·µã (A ‚Üí‚àó‚à∂ encode T·µ¢‚Çô·µ¢‚Çú)
    ‚ä£ [3] {A = A} (‚âÅ‚ÇÅ-encodeT T·µ¢‚Çô·µ¢‚Çú)

  ‚Äî‚Üí  (` TC ‚à£ (‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©
            ‚à£ A auth[ ‚ôØ‚ñ∑ TC ] ‚à£ B auth[ ‚ôØ‚ñ∑ TC ])
            | A auth[ x ‚ñ∑À¢ TC ]) at0
            ‚ä£ ((auth-init‚¶Ö B , TC , y ‚¶Ü , _) , _)
    ~ (A ‚Üí‚àó‚à∂ SIG (K·µñ ≥‚Å±·µõ A) (‚àÉTx ‚àã -, -, T·µ¢‚Çô·µ¢‚Çú))
    ‚ä£ [L3] mk‚Ñç {h = h‚ÇÉ} (A , ùüò) []

  ‚Äî‚Üí  (` TC ‚à£ (‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©
            ‚à£ A auth[ ‚ôØ‚ñ∑ TC ] ‚à£ B auth[ ‚ôØ‚ñ∑ TC ]
            | A auth[ x ‚ñ∑À¢ TC ]) | B auth[ y ‚ñ∑À¢ TC ]) at0
            ‚ä£ ((auth-init‚¶Ö B , TC , y ‚¶Ü , _) , _)
    ~ (B ‚Üí‚àó‚à∂ SIG (K·µñ ≥‚Å±·µõ B) (‚àÉTx ‚àã -, -, T·µ¢‚Çô·µ¢‚Çú))
    ‚ä£ [L3] mk‚Ñç {h = h‚ÇÉ‚Ä≤} (A , ùüô) [ (Œª _ ‚Üí label‚â¢ SIG‚â¢) ]

  ‚Äî‚Üí  (‚ü® C , 1 ‚ü©at x‚ÇÅ ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©) at0
      ‚ä£ ((init‚¶Ö G , C ‚¶Ü , _) , _)
    ~ submit (-, -, T·µ¢‚Çô·µ¢‚Çú)
    ‚ä£ [L4] mk‚Ñç {h = h‚ÇÑ}

  ‚Äî‚Üí  (‚ü® C , 1 ‚ü©at x‚ÇÅ ‚à£ A ‚à∂ a ‚ôØ N) at0
      ‚ä£ ((auth-rev‚¶Ö A , a ‚¶Ü , _) , _)
    ~ (A ‚Üí‚àó‚à∂ encode a)
    ‚ä£ [L7] mk‚Ñç {h = h‚Çá} (A , txoutTC , ùüù) ùüò m‚â• (A , ùüò)
          [ (Œª _ ())
          ‚®æ (Œª _ ‚Üí label‚â¢ SIG‚â¢encode)
          ‚®æ (Œª _ ‚Üí label‚â¢ SIG‚â¢encode)
          ‚®æ (Œª _ ‚Üí label‚â¢ encode‚â¢)
          ‚®æ (Œª _ ‚Üí label‚â¢ SIG‚â¢encode)
          ]

  ‚Äî‚Üí  (‚ü® [ withdraw A ] , 1 ‚ü©at x‚ÇÇ ‚à£ A ‚à∂ a ‚ôØ N) at0
      ‚ä£ ((put‚¶Ö [] , [ a ] , x‚ÇÅ ‚¶Ü , _) , _)
    ~ submit (-, -, T‚Ä≤)
    ‚ä£ [L6] mk‚Ñç {h = h‚ÇÜ}

  ‚Äî‚Üí  (‚ü® A has 1 ùêÅ ‚ü©at x‚ÇÉ ‚à£ A ‚à∂ a ‚ôØ N) at0
      ‚ä£ ((withdraw‚¶Ö A , 1 ùêÅ , x‚ÇÇ ‚¶Ü , _) , _)
    ~ submit (-, -, T‚Ä≤·µÉ)
    ‚ä£ [L9] mk‚Ñç {h = h‚Çâ}

    where
      h‚ÇÇ : H‚ÇÇ-args
      h‚ÇÇ = mk {TC}{‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y}
              {0}{A} K¬≤ [ a , just N , a‚ôØ ] auto auto (Œª _ ‚Üí auto)
              (_ ‚®æ _ ‚®æ _ ‚ä£ auto
              ‚âà ` TC ‚à£ ‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y
                     ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü© ‚à£ A auth[ ‚ôØ‚ñ∑ TC ] ‚ä£ auto)
      postulate
        h‚â° : ‚à£ a‚ôØ ‚à£·µê ‚â° Œ∑
        ‚à£a‚à£ : ‚à£ encode a ‚à£·µê ‚â° Œ∑ + N

      h‚ÇÇ‚Ä≤ : H‚ÇÇ-args
      h‚ÇÇ‚Ä≤ = mk {TC}{‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y
                     ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü© ‚à£ A auth[ ‚ôØ‚ñ∑ TC ]}
               {0}{B} K¬≤ [] refl [] (Œª _ ‚Üí [])
               ( _ ‚®æ _ ‚®æ _ ‚ä£ auto
               ‚âà (` TC ‚à£ (‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y
                       ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü© ‚à£ A auth[ ‚ôØ‚ñ∑ TC ])
                       ‚à£ B auth[ ‚ôØ‚ñ∑ TC ]) ‚ä£ auto)
      h‚ÇÉ : H‚ÇÉ-args
      h‚ÇÉ = mk {TC}{‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©
                    ‚à£ A auth[ ‚ôØ‚ñ∑ TC ] ‚à£ B auth[ ‚ôØ‚ñ∑ TC ]}{0}
              (auto .unmk‚äÜ) ùüò
              (_ ‚®æ _ ‚®æ _ ‚ä£ auto
              ‚âà (` TC ‚à£ (‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©
                      ‚à£ A auth[ ‚ôØ‚ñ∑ TC ] ‚à£ B auth[ ‚ôØ‚ñ∑ TC ])
                      ‚à£ A auth[ x ‚ñ∑À¢ TC ]) ‚ä£ auto)
      h‚ÇÉ‚Ä≤ : H‚ÇÉ-args
      h‚ÇÉ‚Ä≤ = mk {TC}{‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©
                    ‚à£ A auth[ ‚ôØ‚ñ∑ TC ] ‚à£ B auth[ ‚ôØ‚ñ∑ TC ] ‚à£ A auth[ x ‚ñ∑À¢ TC ]}
               {0}{B}{y}{0 ùêÅ}
               (auto .unmk‚äÜ) ùüô
               (_ ‚®æ _ ‚®æ _ ‚ä£ auto
               ‚âà (` TC ‚à£ (‚ü® A has 1 ùêÅ ‚ü©at x ‚à£ ‚ü® B has 0 ‚ü©at y ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©
                       ‚à£ A auth[ ‚ôØ‚ñ∑ TC ] ‚à£ B auth[ ‚ôØ‚ñ∑ TC ]
                       ‚à£ A auth[ x ‚ñ∑À¢ TC ]) ‚à£ B auth[ y ‚ñ∑À¢ TC ]) ‚ä£ auto)
      h‚ÇÑ : H‚ÇÑ-args
      h‚ÇÑ = mk {TC}{‚ü® A ‚à∂ a ‚ôØ just N ‚ü©}{0}{x‚ÇÅ}
              auto
              (_ ‚®æ _ ‚®æ _ ‚ä£ auto
              ‚âà (‚ü® C , 1 ‚ü©at x‚ÇÅ ‚à£ ‚ü® A ‚à∂ a ‚ôØ just N ‚ü©) ‚ä£ auto)

      h‚ÇÜ : H‚ÇÜ-args
      h‚ÇÜ = mk {C}{1 ùêÅ}{x‚ÇÅ}{[ withdraw A ]}{x‚ÇÇ}{A ‚à∂ a ‚ôØ N}{0}{i = 0F}
              refl refl auto refl refl
              (_ ‚®æ _ ‚®æ _ ‚ä£ auto ‚âà (‚ü® [ withdraw A ] , 1 ‚ü©at x‚ÇÇ ‚à£ A ‚à∂ a ‚ôØ N) ‚ä£ auto)

      h‚Çá : H‚Çá-args
      h‚Çá = mk {TC}{A}{a}{N}{‚ü® C , 1 ùêÅ ‚ü©at x‚ÇÅ}{0} K¬≤ [ a , just N , a‚ôØ ]
              (_ ‚®æ _ ‚®æ _ ‚ä£ auto
              ‚âà (‚ü® C , 1 ‚ü©at x‚ÇÅ ‚à£ A ‚à∂ a ‚ôØ N) ‚ä£ auto)
              ùüô

      postulate m‚â• : ‚à£ encode a ‚à£·µê Nat.‚â• Œ∑

      h‚Çâ : H‚Çâ-args
      h‚Çâ = mk {[ withdraw A ]}{1 ùêÅ}{x‚ÇÇ}{A ‚à∂ a ‚ôØ N}{A}{x‚ÇÉ}{0}{i = 0F}
              refl auto refl []
              (_ ‚®æ _ ‚®æ _ ‚ä£ auto ‚âà (‚ü® A has 1 ùêÅ ‚ü©at x‚ÇÉ ‚à£ A ‚à∂ a ‚ôØ N) ‚ä£ auto)
